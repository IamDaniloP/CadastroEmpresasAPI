// <auto-generated />
using System;
using CadastrosEmpresas.API.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CadastrosEmpresas.API.Migrations
{
    [DbContext(typeof(ConnectionContext))]
    [Migration("20231021185518_V2_att-table-task")]
    partial class V2_atttabletask
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CadastrosEmpresas.API.Model.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompaniesCNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DepartmentDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeadOfTheDepartment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompaniesCNPJ");

                    b.HasIndex("HeadOfTheDepartment")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CadastrosEmpresas.API.Model.Domain.Entities.EmployeeTask", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("EmployeeId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("EmployeesTask");
                });

            modelBuilder.Entity("CadastrosEmpresas.API.Model.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FinishDate")
                        .HasColumnType("date");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TaskName");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Companies", b =>
                {
                    b.Property<string>("CNPJ")
                        .HasColumnType("text");

                    b.Property<string>("CEO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompaniesName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Niche")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CNPJ");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompaniesCNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("NameEmployee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompaniesCNPJ");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("CPF", "Email", "PhoneNumber")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CadastrosEmpresas.API.Model.Domain.Entities.Department", b =>
                {
                    b.HasOne("Companies", "Companies")
                        .WithMany("Departments")
                        .HasForeignKey("CompaniesCNPJ")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("CadastrosEmpresas.API.Model.Domain.Entities.EmployeeTask", b =>
                {
                    b.HasOne("Employee", "Employee")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CadastrosEmpresas.API.Model.Domain.Entities.Task", "Task")
                        .WithMany("EmployeeTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CadastrosEmpresas.API.Model.Domain.Entities.Task", b =>
                {
                    b.HasOne("CadastrosEmpresas.API.Model.Domain.Entities.Department", "Department")
                        .WithMany("Tasks")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.HasOne("Companies", "Companies")
                        .WithMany("Employees")
                        .HasForeignKey("CompaniesCNPJ")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CadastrosEmpresas.API.Model.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companies");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CadastrosEmpresas.API.Model.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("CadastrosEmpresas.API.Model.Domain.Entities.Task", b =>
                {
                    b.Navigation("EmployeeTasks");
                });

            modelBuilder.Entity("Companies", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Navigation("EmployeeTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
